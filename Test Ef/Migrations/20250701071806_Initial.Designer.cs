// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test_Ef.Models;

#nullable disable

namespace Test_Ef.Migrations
{
    [DbContext(typeof(LandContext))]
    [Migration("20250701071806_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LandTaal", b =>
                {
                    b.Property<int>("LandenLandCode")
                        .HasColumnType("int");

                    b.Property<int>("TalenTaalCode")
                        .HasColumnType("int");

                    b.HasKey("LandenLandCode", "TalenTaalCode");

                    b.HasIndex("TalenTaalCode");

                    b.ToTable("LandTaal");
                });

            modelBuilder.Entity("Test_Ef.Models.Land", b =>
                {
                    b.Property<int>("LandCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandCode"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LandCode");

                    b.ToTable("Landen");
                });

            modelBuilder.Entity("Test_Ef.Models.Stad", b =>
                {
                    b.Property<int>("StadNummer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StadNr");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StadNummer"));

                    b.Property<int>("LandCode")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("StadNummer");

                    b.HasIndex("LandCode");

                    b.ToTable("Steden");
                });

            modelBuilder.Entity("Test_Ef.Models.Taal", b =>
                {
                    b.Property<int>("TaalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaalCode"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaalCode");

                    b.ToTable("Talen");
                });

            modelBuilder.Entity("LandTaal", b =>
                {
                    b.HasOne("Test_Ef.Models.Land", null)
                        .WithMany()
                        .HasForeignKey("LandenLandCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_Ef.Models.Taal", null)
                        .WithMany()
                        .HasForeignKey("TalenTaalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test_Ef.Models.Stad", b =>
                {
                    b.HasOne("Test_Ef.Models.Land", "Land")
                        .WithMany("Steden")
                        .HasForeignKey("LandCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Land");
                });

            modelBuilder.Entity("Test_Ef.Models.Land", b =>
                {
                    b.Navigation("Steden");
                });
#pragma warning restore 612, 618
        }
    }
}
